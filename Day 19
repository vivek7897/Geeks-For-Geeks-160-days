class Solution:
    def minChar(self, s):
        # Create the reversed version of the string
        rev_s = s[::-1]
        
        # Create a new string for KMP processing
        combined = s + "#" + rev_s
        
        # Compute the prefix function
        n = len(combined)
        lps = [0] * n  # Longest Prefix Suffix array
        
        for i in range(1, n):
            j = lps[i - 1]
            while j > 0 and combined[i] != combined[j]:
                j = lps[j - 1]
            if combined[i] == combined[j]:
                j += 1
            lps[i] = j
        
        # The length of the longest palindromic suffix in the original string
        longest_palindromic_suffix_length = lps[-1]
        
        # Minimum characters to add to the front
        return len(s) - longest_palindromic_suffix_length

